stages:
# Define the pipeline stages - Build stage is responsible for building and packaging the application
- stage: Build
  displayName: 'Build Stage'
  jobs:
  # A job represents a series of steps that run on the same agent
  - job: BuildJob
    pool:
      # Using the self-hosted agent pool named 'pcso-dev'
      name: 'pcso-dev'
    steps:
    # Explicitly checkout the repository code to the agent
    - checkout: self

    # Build the .NET Core project using the DotNetCoreCLI task
    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'             # Use the build command
        projects: '$(projectPath)'    # Project file to build (defined in variables)
        arguments: '--configuration $(buildConfiguration)'  # Build configuration (Release)

    # Run tests
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
        publishTestResults: true
        testRunTitle: 'Unit Tests'
    
    # Publish code coverage results
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/**/coverage'

    # Publish the project to prepare it for deployment
    - task: DotNetCoreCLI@2
      displayName: 'Publish Project'
      inputs:
        command: 'publish'           # Use the publish command
        publishWebProjects: false    # Only publish specified projects, not all web projects
        projects: '$(projectPath)'    # Project file to publish
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'  # Output to staging directory
        zipAfterPublish: true        # Create a zip file after publishing

    # Publish the build artifacts so they can be used by the deployment stage
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'  # Path containing files to publish
        ArtifactName: 'webapp'                              # Name of the artifact to create
        publishLocation: 'Container'                        # Publish to pipeline artifact storage

# Deploy stage (existing)
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - deployment: DeployToVM
    displayName: 'Deploy to EC2 Instance'
    environment:
      name: 'dev'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'
              checkDownloadedFiles: true
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # 1. Define Names and Paths
                $sourceZip = '$(System.ArtifactsDirectory)/drop/s.zip'
                $destination = 'C:\inetpub\MyWebApp'
                $appPoolName = 'MyWebApp' # The name of the App Pool you created in IIS

                # 2. Stop the Application Pool to unlock files
                Write-Host "Stopping application pool: $appPoolName"
                Stop-WebAppPool -Name $appPoolName


                # Add a delay to allow the worker process to shut down completely
                Write-Host "Waiting for 2 seconds..."
                Start-Sleep -Seconds 2

                # 3. Deploy the Files
                Write-Host "Clearing destination folder: $destination"
                if (Test-Path ($destination + "\*")) {
                    Remove-Item -Path ($destination + "\*") -Recurse -Force
                }

                Write-Host "Unzipping application files..."
                Expand-Archive -Path $sourceZip -DestinationPath $destination -Force

                # 4. Start the Application Pool
                Write-Host "Starting application pool: $appPoolName"
                Start-WebAppPool -Name $appPoolName

                Write-Host "Deployment to IIS site is complete."
