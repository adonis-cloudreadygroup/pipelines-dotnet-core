# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  projectPath: 'pipelines-dotnet-core.csproj'
stages:
# Define the pipeline stages - Build stage is responsible for building and packaging the application
- stage: Build
  displayName: 'Build Stage'
  jobs:
  # A job represents a series of steps that run on the same agent
  - job: BuildJob
    pool:
      # Using the self-hosted agent pool named 'pcso-dev'
      name: 'pcso-dev'
    steps:
    # Explicitly checkout the repository code to the agent
    - checkout: self

    # Build the .NET Core project using the DotNetCoreCLI task
    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'             # Use the build command
        projects: '$(projectPath)'    # Project file to build (defined in variables)
        arguments: '--configuration $(buildConfiguration)'  # Build configuration (Release)

    # Publish the project to prepare it for deployment
    - task: DotNetCoreCLI@2
      displayName: 'Publish Project'
      inputs:
        command: 'publish'           # Use the publish command
        publishWebProjects: false    # Only publish specified projects, not all web projects
        projects: '$(projectPath)'    # Project file to publish
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'  # Output to staging directory
        zipAfterPublish: true        # Create a zip file after publishing

    # Publish the build artifacts so they can be used by the deployment stage
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# --- ADD THIS DEPLOYMENT STAGE ---
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
  - deployment: DeployToVM
    displayName: 'Deploy to EC2 Instance'
    environment:
      name: 'dev'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'
              checkDownloadedFiles: true
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Define source and destination paths
                $sourceZip = '$(System.ArtifactsDirectory)/drop/s.zip'
                $destination = '$(Agent.ToolsDirectory)/drop'
                
                # Ensure the destination directory exists and is empty
                if (Test-Path $destination) {
                    Remove-Item -Path $destination -Recurse -Force
                }
                New-Item -ItemType Directory -Path $destination -Force
                
                # Unzip the application files
                Expand-Archive -Path $sourceZip -DestinationPath $destination -Force
                
                # Run the web app as a background process
                Start-Process -FilePath "dotnet" -ArgumentList "'$destination/pipelines-dotnet-core.dll'" -WindowStyle Hidden
